% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_aggregation_exact.R
\name{plot_aggregation_exact}
\alias{plot_aggregation_exact}
\title{Plot the aggregations for the grid search}
\usage{
plot_aggregation_exact(
  Lambda,
  inputlist,
  with_lines = TRUE,
  with_points = FALSE,
  plotly_text = FALSE,
  leg.pos = "none"
)
}
\arguments{
\item{Lambda}{Data frame containing weight vectors and labels for weighted rank aggregations.
Must include column names lambda1/2 for right triangle representation.}

\item{inputlist}{List of 4 data frames from \link{rank_decomposition_exact}}

\item{with_lines}{Boolean for whether to add lines for Linedf}

\item{with_points}{Boolean for whether to add points for IntersectPts}

\item{plotly_text}{Boolean for whether to include text which is useful for plotly conversion.
Note that a warning will occur about an "unknown aesthetics" (text); this is a
feature which is intended to be used by the ggplotly interactive library. The warning is not
fixable, and should be ignored. For ggplotly visual tool, use
ggplotly(g,tooltip = 'text') to access these aesthetics as appropriate labels.}

\item{leg.pos}{Input for ggplot legend positioning, e.g. 'bottom', 'right', or c(0.8,0.8)}
}
\value{
A ggplot structure which can be plotted directly.
}
\description{
For every weight vector (row) of data frame, compute the weighted rank aggregation and generate
a string label. The strings are concatenations of the elements in order from best to worst,
separated by periods.
}
\examples{
Lambda <- weight_set(0.1)
rankdf <- data.frame('rank1'=c(1,2,3,4,5), 
           'rank2'=c(2,3,1,5,4), 'rank3'=c(3,1,5,4,2))
Lambda <- Lambda <- rank_aggregation_grid(Lambda,rankdf)
inputlist <- rank_decomposition_exact(rankdf,Lambda)
plot_aggregation_exact(Lambda,inputlist)
plot_aggregation_exact(Lambda,inputlist,
    with_lines=TRUE,with_points=TRUE,plotly_text=FALSE,leg.pos='bottom')
Lambda <- rank_topalpha_grid(Lambda, alpha=3, metrics=metrics)
inputlist <- rank_decomposition_exact(rankdf,Lambda,alpha=3)
plot_aggregation_exact(Lambda,inputlist,with_lines=FALSE,leg.pos='bottom')
}
