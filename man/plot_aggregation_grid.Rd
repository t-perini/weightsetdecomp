% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_aggregation_grid.R
\name{plot_aggregation_grid}
\alias{plot_aggregation_grid}
\title{Plot the aggregations for the grid search}
\usage{
plot_aggregation_grid(
  Lambda,
  by = "Rank.Label",
  triangle = "equilateral",
  bias_axes = TRUE,
  annotations = TRUE,
  plotly_text = FALSE,
  leg.pos = "none",
  random.color = 1
)
}
\arguments{
\item{Lambda}{Data frame containing weight vectors and labels for weighted rank aggregations.
Must include column names lambda1/2 for right triangle representation or
equilambda1/2 for equilateral triangle representation.}

\item{by}{Column name for the string/factor identifier of the rank aggregation.
Most common: Rank.Label, Item.Label, TopAlpha, or Budget}

\item{triangle}{Specify whether the right triangle representation ("right") or the
equilateral triangle representation ("equilateral"). Note that the equilateral triangle
representation is recommended as it is unbiased, and the right triangle representation is
biased.}

\item{bias_axes}{Boolean for whether to include bias axes in the graph}

\item{annotations}{Boolean for whether to include annotations in the graph}

\item{plotly_text}{Boolean for whether to include text which is useful for plotly conversion.
Note that a warning will occur about an "unknown aesthetics" (text); this is a
feature which is intended to be used by the ggplotly interactive library. The warning is not
fixable, and should be ignored. For ggplotly visual tool, use
ggplotly(g,tooltip = 'text') to access these aesthetics as appropriate labels.}

\item{leg.pos}{Input for ggplot legend positioning, e.g. 'bottom', 'right', or c(0.8,0.8)}

\item{random.color}{Seed for randomizing colors based on label (for improved readability).
0 indicates no randomization.}
}
\value{
A ggplot structure which can be plotted directly.
}
\description{
For every weight vector (row) of data frame, compute the weighted rank aggregation and generate
a string label. The strings are concatenations of the elements in order from best to worst,
separated by periods.
}
\examples{
Lambda <- weight_set()
metrics <- data.frame('cost'=c(10,20,30,40), 'time'=c(5.9, 3.3, 2.5, 4.1), 'risk'=c(1,4,3,2))
Lambda <- rank_aggregation_grid(3,Lambda,metrics)
plot_aggregation_grid(Lambda)
g <- plot_aggregation_grid(Lambda,by='Item.Label')
g
plot_aggregation_grid(Lambda,triangle='right',bias_axes=FALSE,annotations=FALSE)
Lambda <- rank_topalpha_grid(Lambda,alpha=3,metrics)
plot_aggregation_grid(Lambda,by='TopAlpha')
g <- plot_aggregation_grid(Lambda,plotly_text = TRUE)
plotly::ggplotly(g, tooltip='text')
}
